/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TranslateRouteImport } from './routes/translate'
import { Route as HistoryRouteImport } from './routes/history'
import { Route as Deep_learningRouteImport } from './routes/deep_learning'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ChatConversationIdRouteImport } from './routes/chat/$conversationId'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const TranslateRoute = TranslateRouteImport.update({
  id: '/translate',
  path: '/translate',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const Deep_learningRoute = Deep_learningRouteImport.update({
  id: '/deep_learning',
  path: '/deep_learning',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatConversationIdRoute = ChatConversationIdRouteImport.update({
  id: '/$conversationId',
  path: '/$conversationId',
  getParentRoute: () => ChatRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteWithChildren
  '/deep_learning': typeof Deep_learningRoute
  '/history': typeof HistoryRoute
  '/translate': typeof TranslateRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/chat/$conversationId': typeof ChatConversationIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteWithChildren
  '/deep_learning': typeof Deep_learningRoute
  '/history': typeof HistoryRoute
  '/translate': typeof TranslateRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/chat/$conversationId': typeof ChatConversationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteWithChildren
  '/deep_learning': typeof Deep_learningRoute
  '/history': typeof HistoryRoute
  '/translate': typeof TranslateRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/chat/$conversationId': typeof ChatConversationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/deep_learning'
    | '/history'
    | '/translate'
    | '/auth/callback'
    | '/auth/login'
    | '/chat/$conversationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/deep_learning'
    | '/history'
    | '/translate'
    | '/auth/callback'
    | '/auth/login'
    | '/chat/$conversationId'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/deep_learning'
    | '/history'
    | '/translate'
    | '/auth/callback'
    | '/auth/login'
    | '/chat/$conversationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRouteWithChildren
  Deep_learningRoute: typeof Deep_learningRoute
  HistoryRoute: typeof HistoryRoute
  TranslateRoute: typeof TranslateRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/translate': {
      id: '/translate'
      path: '/translate'
      fullPath: '/translate'
      preLoaderRoute: typeof TranslateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deep_learning': {
      id: '/deep_learning'
      path: '/deep_learning'
      fullPath: '/deep_learning'
      preLoaderRoute: typeof Deep_learningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/$conversationId': {
      id: '/chat/$conversationId'
      path: '/$conversationId'
      fullPath: '/chat/$conversationId'
      preLoaderRoute: typeof ChatConversationIdRouteImport
      parentRoute: typeof ChatRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ChatRouteChildren {
  ChatConversationIdRoute: typeof ChatConversationIdRoute
}

const ChatRouteChildren: ChatRouteChildren = {
  ChatConversationIdRoute: ChatConversationIdRoute,
}

const ChatRouteWithChildren = ChatRoute._addFileChildren(ChatRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRouteWithChildren,
  Deep_learningRoute: Deep_learningRoute,
  HistoryRoute: HistoryRoute,
  TranslateRoute: TranslateRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthLoginRoute: AuthLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
